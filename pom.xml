<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.softvision.qaautomation</groupId>
    <artifactId>spring-react-qatest</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>spring-react-qatest</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <frontend-maven-plugin.version>1.7.6</frontend-maven-plugin.version>
        <node.version>v10.13.0</node.version>
        <yarn.version>v1.12.1</yarn.version>
        <version.springframework.boot>${project.parent.version}</version.springframework.boot>
        <version.springfox>2.9.2</version.springfox>
        <version.swagger.annotations>1.5.18</version.swagger.annotations>
        <plugin.version.git-commit-id-plugin>2.2.4</plugin.version.git-commit-id-plugin>
        <start-class>com.softvision.example.springboot.JugToursApplication</start-class>
        <skip.unit.tests>false</skip.unit.tests>
        <skip.integration.tests>true</skip.integration.tests>
        <gatling.version>3.0.2</gatling.version>
    </properties>

    <pluginRepositories>
        <pluginRepository>
            <id>smartbear-sweden-plugin-repository</id>
            <url>http://www.soapui.org/repository/maven2/</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <!-- adds /actuator endpoints for metrics -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${version.springfox}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${version.springfox}</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${version.swagger.annotations}</version>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.4.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>3.141.59</version>
        </dependency>

        <!-- rest assured deps -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>3.3.0</version>
            <scope>test</scope>
        </dependency>
        <!-- rest assured deps -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-commons</artifactId>
            <version>1.4.1</version>
            <scope>test</scope>
        </dependency>
        <!-- rest assured deps json validator-->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>4.0.0</version>
            <scope>test</scope>
        </dependency>

        <!-- karate test deps this causes a teset failure -->
<!--        <dependency>-->
<!--            <groupId>com.intuit.karate</groupId>-->
<!--            <artifactId>karate-ui</artifactId>-->
<!--            <version>0.9.3.RC2</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->
        <!-- karate test deps -->
        <dependency>
            <groupId>com.intuit.karate</groupId>
            <artifactId>karate-apache</artifactId>
            <version>0.9.3.RC2</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>javafx-controls</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- karate test deps -->
        <dependency>
            <groupId>com.intuit.karate</groupId>
            <artifactId>karate-junit5</artifactId>
            <version>0.9.3.RC2</version>
            <scope>test</scope>
        </dependency>
        <!-- gatling load test -->
        <dependency>
            <groupId>io.gatling.highcharts</groupId>
            <artifactId>gatling-charts-highcharts</artifactId>
            <version>${gatling.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>



    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.6.0</version>
                </plugin>
            </plugins>

        </pluginManagement>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${version.springframework.boot}</version>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <mainClass>${start-class}</mainClass>
                            <classifier>boot</classifier>
                        </configuration>
                    </execution>
                    <execution>
                        <id>build-info</id>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
<!--                    <execution>-->
<!--                        <id>pre-integration-test</id>-->
<!--                        <goals>-->
<!--                            <goal>start</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                    <execution>-->
<!--                        <id>post-integration-test</id>-->
<!--                        <goals>-->
<!--                            <goal>stop</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18</version>
                <configuration>
                    <!-- Skips unit tests if the value of skip.unit.tests property is true -->
                    <skipTests>${skip.unit.tests}</skipTests>
                    <!-- Excludes integration tests when unit tests are run -->
                    <excludes>
                        <exclude>**/IT*.java</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>${plugin.version.git-commit-id-plugin}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <configuration>
                            <verbose>true</verbose>
                            <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>
                            <generateGitPropertiesFile>true</generateGitPropertiesFile>
                            <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
                            </generateGitPropertiesFilename>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


        </plugins>
    </build>

    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>process-classes</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/static</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>app/build</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <version>${frontend-maven-plugin.version}</version>
                        <configuration>
                            <workingDirectory>app</workingDirectory>
                        </configuration>
                        <executions>
                            <execution>
                                <id>install node</id>
                                <goals>
                                    <goal>install-node-and-yarn</goal>
                                </goals>
                                <configuration>
                                    <nodeVersion>${node.version}</nodeVersion>
                                    <yarnVersion>${yarn.version}</yarnVersion>
                                </configuration>
                            </execution>
                            <execution>
                                <id>yarn install</id>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>
                                <phase>generate-resources</phase>
                            </execution>
                            <execution>
                                <id>yarn test</id>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>
                                <phase>test</phase>
                                <configuration>
                                    <arguments>test</arguments>
                                    <environmentVariables>
                                        <CI>true</CI>
                                    </environmentVariables>
                                </configuration>
                            </execution>
                            <execution>
                                <id>yarn build</id>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>
                                <phase>compile</phase>
                                <configuration>
                                    <arguments>build</arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>
        </profile>
        <profile>
            <id>build-docker-image</id>
            <properties>
                <skipTests>true</skipTests>
            </properties>
            <activation>
                <property>
                    <name>dockerImage</name>
                    <value>build</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <executable>${project.basedir}/docker/scripts/docker.sh</executable>
                                    <arguments>
                                        <argument>${project.version}</argument>
                                        <argument>i</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>push-docker-image</id>
            <properties>
                <skipTests>true</skipTests>
            </properties>
            <activation>
                <property>
                    <name>dockerImage</name>
                    <value>push</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                    </plugin>
                    <!-- -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-push-docker-image</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <executable>${project.basedir}/docker/scripts/docker.sh</executable>
                                    <arguments>
                                        <argument>${project.version}</argument>
                                        <argument>p</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker-integration-tests</id>
            <properties>
                <!-- onyl run integration tests and not unit tests here -->
                <postman.env>local-dev</postman.env>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <build>
                <plugins>
                    <!-- Setup/Teardown Docker environment for Integration Tests -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <execution>
                                <id>docker-compose-up</id>
                                <phase>generate-test-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.basedir}/docker/scripts/docker-up.sh</executable>
                                    <arguments>
                                        <argument>${project.version}</argument>
                                        <argument>${postman.env}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>integration-tests</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>newman</executable> <!-- install first npm install -g newman -->
                                    <commandlineArgs>
                                        run src/test/resources/postman/GroupsApi.postman_collection.json -e   src/test/resources/postman/envs/${postman.env}.postman_environment.json
                                    </commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-down</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.basedir}/docker/scripts/docker-down.sh</executable>
                                    <arguments>
                                        <argument>${postman.env}</argument>
                                    </arguments>
                                </configuration>
                            </execution>

                        </executions>
                    </plugin>

                    <!-- Deploy current build artifact to Docker container -->
                </plugins>
            </build>
        </profile>
        <profile>
            <id>integration-tests</id>
            <properties>
                <!-- onyl run integration tests and not unit tests here -->
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>2.22.2</version>
                        <configuration>
                            <systemProperties>
                                <testURL>http://localhost:8180</testURL>
                            </systemProperties>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Setup/Teardown  environment for Integration Tests -->
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <version>${version.springframework.boot}</version>
                        <executions>
                            <!-- NOTE log levels are controlled by src/main/resources/application.yml
                                 since this is run outside of the test runner.
                             -->
                            <execution>
                                <id>pre-integration-test</id>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>post-integration-test</id>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>soapui-integration-tests</id>
            <properties>
                <!-- onyl run integration tests and not unit tests here -->
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.smartbear.soapui</groupId>
                        <artifactId>soapui-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                            </execution>
                        </executions>
                        <version>5.5.0</version>
                        <configuration>
                            <projectFile>${project.basedir}/src/test/resources/soapui/GroupsRESTAPI-soapui-project.xml</projectFile>
                            <projectProperties>
                                <value>message=Hello World!</value>
                            </projectProperties>
                            <outputFolder>testOutput</outputFolder>
                        </configuration>
                        <dependencies>
                            <dependency>
                                <groupId>com.jgoodies</groupId>
                                <artifactId>jgoodies-forms</artifactId>
                                <version>1.9.0</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <!-- Setup/Teardown  environment for Integration Tests -->
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <version>${version.springframework.boot}</version>
                        <executions>
                            <!-- NOTE log levels are controlled by src/main/resources/application.yml
                                 since this is run outside of the test runner.
                             -->
                            <execution>
                                <id>pre-integration-test</id>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>post-integration-test</id>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>scala-integration-tests</id>
            <properties>
                <!-- onyl run integration tests and not unit tests here -->
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <scala.api.host.url>http://localhost:8180</scala.api.host.url>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <execution>
                                <id>docker-compose-up2</id>
                                <phase>generate-test-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.basedir}/docker/scripts/docker-up.sh</executable>
                                    <arguments>
                                        <argument>${project.version}</argument>
                                        <argument>${scala.api.host.url}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-down2</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.basedir}/docker/scripts/docker-down.sh</executable>
                                    <arguments>
                                        <argument>${scala.api.host.url}</argument>
                                    </arguments>
                                </configuration>
                            </execution>

                        </executions>
                    </plugin>

                    <!-- Deploy current build artifact to Docker container -->
                    <plugin>
                        <groupId>io.gatling</groupId>
                        <artifactId>gatling-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                            </execution>
                        </executions>
                        <version>${gatling.version}</version>
                        <configuration>
                            <simulationClass>com.softvision.qaautomation.RecordedSimulation</simulationClass>                               <!-- the name of the single Simulation class to run -->
                            <runMultipleSimulations>false</runMultipleSimulations>                   <!-- if the plugin should run multiple simulations sequentially -->
<!--                            <includes>                                                               &lt;!&ndash; include filters, see dedicated section below &ndash;&gt;-->
<!--                                <include></include>-->
<!--                            </includes>-->
<!--                            <excludes>                                                               &lt;!&ndash; exclude filters, see dedicated section below &ndash;&gt;-->
<!--                                <exclude></exclude>-->
<!--                            </excludes>-->
<!--                            <noReports>false</noReports>                                             &lt;!&ndash; to disable generating HTML reports &ndash;&gt;-->
<!--                            <reportsOnly></reportsOnly>                                              &lt;!&ndash; to only trigger generating HTML reports from the log file contained in folder parameter &ndash;&gt;-->
<!--                            <runDescription>This-is-the-run-description</runDescription>             &lt;!&ndash; short text that will be displayed in the HTML reports &ndash;&gt;-->
<!--                            <skip>false</skip>                                                       &lt;!&ndash; skip executing this plugin &ndash;&gt;-->
<!--                            <failOnError>false</failOnError>                                          &lt;!&ndash; report failure in case of assertion failure, typically to fail CI pipeline &ndash;&gt;-->
<!--                            <continueOnAssertionFailure>false</continueOnAssertionFailure>           &lt;!&ndash; keep on executing multiple simulations even if one fails &ndash;&gt;-->
<!--                            <useOldJenkinsJUnitSupport>false</useOldJenkinsJUnitSupport>             &lt;!&ndash; report results to Jenkins JUnit support (workaround until we manage to get Gatling support into Jenkins) &ndash;&gt;-->
<!--                            <jvmArgs>-->
<!--                                <jvmArg>-DmyExtraParam=foo</jvmArg>                                    &lt;!&ndash; pass extra parameters to the Gatling JVM &ndash;&gt;-->
<!--                            </jvmArgs>-->
<!--                            <overrideJvmArgs>false</overrideJvmArgs>                                 &lt;!&ndash; if above option should override the defaults instead of replacing them &ndash;&gt;-->
<!--                            <propagateSystemProperties>true</propagateSystemProperties>              &lt;!&ndash; if System properties from the maven JVM should be propagated to the Gatling forked one &ndash;&gt;-->
<!--                            <compilerJvmArgs>-->
<!--                                <compilerJvmArg>-DmyExtraParam=foo</compilerJvmArg>                    &lt;!&ndash; pass extra parameters to the Compiler JVM &ndash;&gt;-->
<!--                            </compilerJvmArgs>-->
<!--                            <overrideCompilerJvmArgs>false</overrideCompilerJvmArgs>                 &lt;!&ndash; if above option should override the defaults instead of replacing them &ndash;&gt;-->
<!--                            <extraScalacOptions>                                                     &lt;!&ndash; extra options to be passed to scalac &ndash;&gt;-->
<!--                                <extraScalacOption></extraScalacOption>-->
<!--                            </extraScalacOptions>-->
<!--                            <disableCompiler>false</disableCompiler>                                 &lt;!&ndash; if compiler should be disabled, typically because another plugin has already compiled sources &ndash;&gt;-->
                            <simulationsFolder>${project.basedir}/src/test/scala</simulationsFolder> <!-- where the simulations to be compiled are located -->
                            <resourcesFolder>${project.basedir}/src/test/resources</resourcesFolder> <!-- where the test resources are located -->
                            <resultsFolder>${project.basedir}/target/gatling</resultsFolder>         <!-- where the simulation log and the HTML reports will be generated -->
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>
